//
// build.gradle in TeamCode
//
// Most of the definitions for building your module reside in a common, shared
// file 'build.common.gradle'. Being factored in this way makes it easier to
// integrate updates to the FTC into your code. If you really need to customize
// the build definitions, you can place those customizations in this file, but
// please think carefully as to whether such customizations are really necessary
// before doing so.


// Custom definitions may go here

// Include common definitions from above.
buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://repo.dairy.foundation/releases"
        }
    }
    dependencies {
        classpath "dev.frozenmilk:Load:0.2.1"
    }
}

apply from: '../build.common.gradle'
apply from: '../build.dependencies.gradle'
apply plugin: 'dev.frozenmilk.sinister.sloth.load'

android {
    namespace = 'org.firstinspires.ftc.teamcode'

    packagingOptions {
        jniLibs {
            pickFirsts += ['**/*.so']
        }
        jniLibs.useLegacyPackaging true
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://repo.dairy.foundation/releases"
    }
    maven {
        url "https://jitpack.io"
    }
}

dependencies {
    implementation project(':FtcRobotController')

    // Both RR and Pedro require excluding the dashboard import (if using the sloth dashboard instead)

    implementation("com.acmerobotics.roadrunner:core:1.0.0") {
        exclude group: "com.acmerobotics.dashboard"
    }
    implementation("com.acmerobotics.roadrunner:ftc:0.1.14") {
        exclude group: "com.acmerobotics.dashboard"
    }
    implementation ("com.acmerobotics.roadrunner:actions:1.0.1"){
        exclude group: "com.acmerobotics.dashboard"
    }

    implementation "com.acmerobotics.slothboard:dashboard:0.2.1+0.4.16"
    implementation "dev.frozenmilk.sinister:Sloth:0.2.1"
    implementation "dev.frozenmilk.dairy:CachingHardware:1.0.0"

    implementation("com.github.Skeleton-Army:Marrow:dev-SNAPSHOT")

    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'junit:junit:4.13.1'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
    }
}